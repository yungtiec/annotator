{"version":3,"sources":["webpack:///./client/scenes/project/scenes/survey/data/service.js","webpack:///./client/scenes/project/scenes/survey/data/actions.js","webpack:///./client/scenes/project/scenes/survey/index.scss","webpack:///./client/scenes/project/scenes/survey/index.scss?cb5f","webpack:///./client/scenes/project/scenes/survey/main.js"],"names":["symbol","_lodash","keyBy","projectData","__webpack_require__","_ref","projectSymbol","surveyId","regeneratorRuntime","mark","_callee","dispatch","getState","project","projectSurveysById","surveyQnas","surveyQnasById","surveyQnaIds","surveyMetadata","wrap","_context","prev","next","_service","getProjectBySymbol","sent","project_surveys","survey","survey_questions","map","qna","id","assignIn","pick","omit","type","types","SURVEY_FETCH_SUCCESS","t0","console","error","stop","this","_ref2","_x","_x2","apply","arguments","_interopRequireWildcard","module","exports","push","i","content","locals","_react","_reactRedux","_reactRouterDom","_actions","_interopRequireDefault","_actions2","_reducer","_reducer2","_reducer3","_reducer4","_reactScroll","_components","_reactAutobind","_socket","SurveyContainer","props","_this","_classCallCheck","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","default","_assertThisInitialized","on","newAnnotation","addNewAnnotationSentFromServer","fetchQuestionsBySurveyId","match","url","split","params","fetchAnnotationsBySurvey","concat","Events","scrollEvent","register","scrollSpy","update","prevProps","prevProjectSymbol","nextProjectSymbol","prevSurveyId","nextSurveyId","animateScroll","scrollToTop","remove","nextProps","isLoggedIn","JSON","stringify","annotationsById","length","createElement","Survey","actions","editAnnotationComment","withRouter","connect","state","_getAllSurveyQuestion","getAllSurveyQuestions","_getAllAnnotations","getAllAnnotations","annotationIds","data","user","getSelectedSurvey","projectMetadata","getSelectedProject"],"mappings":"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","file":"./public/4.bundle.js","sourcesContent":["var projectData = require(\"../../../../../mock-data/project\");\nimport { keyBy } from \"lodash\";\n\nexport function getProjectBySymbol(symbol) {\n  return keyBy(projectData, \"symbol\")[symbol];\n}\n","import * as types from \"./actionTypes\";\nimport { getProjectBySymbol } from \"./service\";\nimport { keyBy, omit, assignIn, pick } from \"lodash\";\n\nexport function fetchQuestionsBySurveyId({ projectSymbol, surveyId }) {\n  return async (dispatch, getState) => {\n    try {\n      const project = await getProjectBySymbol(projectSymbol);\n      const projectSurveysById = keyBy(project.project_surveys, \"id\");\n      const surveyQnas = projectSurveysById[surveyId].survey.survey_questions;\n      const surveyQnasById = keyBy(surveyQnas, \"id\");\n      const surveyQnaIds = surveyQnas.map(qna => qna.id);\n      const surveyMetadata = assignIn(\n        pick(projectSurveysById[surveyId], [\"name\", \"id\"]),\n        omit(projectSurveysById[surveyId].survey, [\"survey_questions\", \"id\"])\n      );\n      dispatch({\n        type: types.SURVEY_FETCH_SUCCESS,\n        surveyQnasById,\n        surveyQnaIds,\n        surveyMetadata\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".project-survey {\\n  max-width: 740px;\\n  padding-top: 50px;\\n  padding-bottom: 6rem;\\n  margin-left: 80px; }\\n\\n.project-survey__back-btn {\\n  cursor: pointer; }\\n\\n.project-survey__header .survey-name__box {\\n  font-weight: 700;\\n  font-size: 3rem;\\n  line-height: 3rem;\\n  text-transform: capitalize; }\\n\\n.project-survey__header .survey-creator-name__box {\\n  font-size: 1.2rem;\\n  color: #838383;\\n  font-family: \\\"Roboto Condensed\\\", sans-serif;\\n  margin-bottom: 60px; }\\n\\n.qna__container {\\n  margin-bottom: 2rem; }\\n\\n.qna__question {\\n  font-family: \\\"Vollkorn\\\", serif;\\n  font-size: 16px;\\n  font-weight: 600;\\n  margin-bottom: 1rem;\\n  text-align: left;\\n  line-height: 1; }\\n\", \"\"]);\n\n// exports\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/css-loader/index.js?url=false!../../../../../node_modules/sass-loader/lib/loader.js!./index.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../../node_modules/css-loader/index.js?url=false!../../../../../node_modules/sass-loader/lib/loader.js!./index.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../../node_modules/css-loader/index.js?url=false!../../../../../node_modules/sass-loader/lib/loader.js!./index.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}","import \"./index.scss\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter, Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { fetchQuestionsBySurveyId } from \"./data/actions\";\nimport {\n  fetchAnnotationsBySurvey,\n  addNewAnnotationSentFromServer,\n  editAnnotationComment\n} from \"./data/annotations/actions\";\nimport { getAllSurveyQuestions } from \"./data/qnas/reducer\";\nimport { getSelectedSurvey } from \"./data/metadata/reducer\";\nimport { getAllAnnotations } from \"./data/annotations/reducer\";\nimport { getSelectedProject } from \"../../data/metadata/reducer\";\nimport { Events, scrollSpy, animateScroll as scroll } from \"react-scroll\";\nimport { Survey } from \"./components\";\nimport autoBind from \"react-autobind\";\nimport socket from \"../../../../socket\";\n\nclass SurveyContainer extends Component {\n  constructor(props) {\n    super(props);\n    autoBind(this);\n    socket.on(\"annotationAdded\", newAnnotation => {\n      this.props.addNewAnnotationSentFromServer(newAnnotation);\n    });\n  }\n\n  componentDidMount() {\n    this.props.fetchQuestionsBySurveyId({\n      projectSymbol: this.props.match.url.split(\"/\")[2],\n      surveyId: this.props.match.params.surveyId\n    });\n    this.props.fetchAnnotationsBySurvey(\n      `http://localhost:8000${this.props.match.url}`\n    );\n    Events.scrollEvent.register(\"begin\", () => {});\n    Events.scrollEvent.register(\"end\", () => {});\n    scrollSpy.update();\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevProjectSymbol = prevProps.match.url.split(\"/\")[2];\n    const nextProjectSymbol = this.props.match.url.split(\"/\")[2];\n    const prevSurveyId = prevProps.match.params.surveyId;\n    const nextSurveyId = this.props.match.params.surveyId;\n    if (\n      prevProjectSymbol !== nextProjectSymbol ||\n      prevSurveyId !== nextSurveyId\n    ) {\n      scroll.scrollToTop();\n    }\n  }\n\n  componentWillUnmount() {\n    Events.scrollEvent.remove(\"begin\");\n    Events.scrollEvent.remove(\"end\");\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const prevProjectSymbol = this.props.match.url.split(\"/\")[2];\n    const nextProjectSymbol = nextProps.match.url.split(\"/\")[2];\n    const prevSurveyId = this.props.match.params.surveyId;\n    const nextSurveyId = nextProps.match.params.surveyId;\n    if (\n      prevProjectSymbol &&\n      prevSurveyId &&\n      (prevProjectSymbol !== nextProjectSymbol || prevSurveyId !== nextSurveyId)\n    ) {\n      this.props.fetchQuestionsBySurveyId({\n        projectSymbol: nextProjectSymbol,\n        surveyId: nextProps.match.params.surveyId\n      });\n      this.props.fetchAnnotationsBySurvey(\n        `http://localhost:8000${nextProps.match.url}`\n      );\n    }\n  }\n\n  shouldComponentUpdate(nextProps) {\n    const prevProjectSymbol = this.props.match.url.split(\"/\")[2];\n    const nextProjectSymbol = nextProps.match.url.split(\"/\")[2];\n    const prevSurveyId = this.props.match.params.surveyId;\n    const nextSurveyId = nextProps.match.params.surveyId;\n    if (\n      this.props.isLoggedIn !== nextProps.isLoggedIn || // login event\n      !this.props.surveyMetadata.id || // on init\n      (prevProjectSymbol !== nextProjectSymbol ||\n        prevSurveyId !== nextSurveyId) || // project_survey changed\n      JSON.stringify(nextProps.annotationsById) !==\n        JSON.stringify(this.props.annotationsById) // annotation changed\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    if (!this.props.surveyQnaIds.length) return \"loading\";\n    return <Survey {...this.props} />;\n  }\n}\n\nconst mapState = state => {\n  const { surveyQnasById, surveyQnaIds } = getAllSurveyQuestions(state);\n  const { annotationsById, annotationIds } = getAllAnnotations(state);\n  return {\n    isLoggedIn: !!state.data.user.id,\n    surveyQnasById,\n    surveyQnaIds,\n    surveyMetadata: getSelectedSurvey(state),\n    projectMetadata: getSelectedProject(state),\n    annotationsById,\n    annotationIds\n  };\n};\n\nconst actions = {\n  fetchQuestionsBySurveyId,\n  fetchAnnotationsBySurvey,\n  addNewAnnotationSentFromServer,\n  editAnnotationComment\n};\n\nexport default withRouter(connect(mapState, actions)(SurveyContainer));\n"],"sourceRoot":""}